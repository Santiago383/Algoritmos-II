import networkx as nx
import matplotlib.pyplot as plt
import math
import random


def calcular_carga(ship, load):
    carga = 0

    if ship.get('capacity') == 1:
        carga = int(70 * load / 100)
    elif ship.get('capacity') == 2:
        carga = int(95 * load / 100)
    elif ship.get('capacity') == 3:
        carga = int(120 * load / 100)

    return carga


def speed_updates(graph, ship, load):

    for u, v, data in graph.edges(data=True):
        if ship.get('speed') == 3:
            if data['weight'] < 11:
                data['weight'] += int(data['weight'] * (load - 25) / 100)
            elif 11 <= data['weight'] < 25:
                data['weight'] += int(data['weight'] * (load - 35) / 100)
        elif ship.get('speed') == 2:
            if data['weight'] < 11:
                data['weight'] += int(data['weight'] * (load - 30) / 100)
            else:
                data['weight'] += int(data['weight'] * (load - 42) / 100)
        elif ship.get('speed') == 1:
            if data['weight'] < 11:
                data['weight'] += int(data['weight'] * (load - 35) / 100)
            else:
                data['weight'] += int(data['weight'] * (load - 50) / 100)


def event_updates(graph, ship, event_code, affected_node):

    if event_code == 1:
        if ship.get('weapons') == 1:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 8
        elif ship.get('weapons') == 2:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 5
    elif event_code == 2:
        if ship.get('armor') == 1:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 12
        elif ship.get('armor') == 2:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 8
    elif event_code == 3:
        if ship.get('weapons') == 1:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 10
        elif ship.get('weapons') == 2:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 7
    elif event_code == 4:
        for u, v, data in graph.edges(data=True):
            if u == affected_node or v == affected_node:
                data['weight'] += 10
    elif event_code == 5:
        graph[6][10]['weight'] = 1
    elif event_code == 6:
        if ship.get('armor') == 1:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 15
        elif ship.get('armor') == 2:
            for u, v, data in graph.edges(data=True):
                if u == affected_node or v == affected_node:
                    data['weight'] += 10


def hyper_jump(graph, ship, load, affected_node):

    for u, v, data in graph.edges(data=True):
        if ship.get('speed') == 3 and u != affected_node and v != affected_node:
            if data['weight'] >= 25:
                data['weight'] -= int(data['weight'] * abs((load - 115)) / 100)


def dijkstra(graph, ini, fin):
    # Diccionario para guardar la distancia acumulada de cada ruta tentativa en cada nodo
    distancias = {node: float('inf') for node in graph.nodes()}
    # Diccionario para guardar el antecesor tentativo de cada nodo
    antecesores = {node: None for node in graph.nodes()}
    # Lista de no visitados, inicialmente la carga con todos los nodos del grafo
    no_visitados = list(graph.nodes())
    # Da valor 0 al nodo origen en el diccionario distancias (inicialmente todos tienen valor infinito)
    distancias[ini] = 0

    # Mientras haya elementos en la lista de no visitados:
    while no_visitados:
        # Mira en la lista de no visitados, y selecciona el menor, en base a su valor en el diccionario 'distancias'
        nodo_actual = min(no_visitados, key=lambda node: distancias[node])
        # Saca al nodo actual de no visitados
        no_visitados.remove(nodo_actual)

        # Si el nodo actual es igual al nodo de destino que ingreso el usuario, se interrumpe el ciclo
        if nodo_actual == fin:
            break

        # Por cada uno de los vecinos del nodo actual (los nodos con los cuales el nodo actual esta conectado):
        for neighbor in graph.neighbors(nodo_actual):
            peso_arco = graph[nodo_actual][neighbor]["weight"]
            # En la var distancia actual guarda la distancia del nodo actual mas el peso del arco
            distancia_actual = distancias[nodo_actual] + peso_arco

            # Si distancia actual es menor que la distancia del vecino que estamos evaluando, actualiza la distancia
            # con distancia actual. Además guarda el nodo actual como antecesor del vecino.
            if distancia_actual < distancias[neighbor]:
                distancias[neighbor] = distancia_actual
                antecesores[neighbor] = nodo_actual

    # Crea una lista para guardar la ruta
    ruta_mas_rapida = []
    # Mientras 'fin' no sea nulo
    while fin is not None:
        # Agrega 'fin' al principio en la lista 'ruta mas rapida'
        ruta_mas_rapida.insert(0, fin)
        # Actualiza 'fin' con su antecesor. Cuando el antecesor sea el del nodo origen, el ciclo termina porque el
        # antecesor del nodo origen es nulo (la función nunca lo evaluó como vecino de nadie por eso nunca actualizó su
        # antecesor, que estaba inicializado como nulo)
        fin = antecesores[fin]

    # Devuelve la ruta en el orden correcto
    return ruta_mas_rapida


def peso_ruta(graph, path):
    peso_acumulado = 0

    for i in range(len(path) - 1):
        peso_acumulado += graph[path[i]][path[i+1]]['weight']

    return peso_acumulado


# Crea un grafo con una lista de nodos, y una lista de tuplas (nodo,nodo,peso) que indican los arcos y sus pesos
G = nx.DiGraph()

nodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

G.add_nodes_from(nodes)

edges = [(1, 2, 6), (1, 3, 10), (1, 4, 17),
         (2, 3, 5), (2, 4, 12),
         (3, 4, 7), (3, 6, 27),
         (4, 5, 5), (4, 6, 15),
         (5, 6, 6), (5, 7, 14),
         (6, 7, 6), (6, 8, 15), (6, 10, 75),
         (7, 8, 8),
         (8, 9, 10), (8, 10, 24), (8, 11, 32),
         (9, 10, 10), (9, 11, 18),
         (10, 11, 8), (10, 12, 22),
         (11, 12, 9)]

G.add_weighted_edges_from(edges)

# Define varias características para que el grafo quede visualmente estético
pos = {1: (-1.08, 0.78), 2: (-0.69, 0.76), 3: (-0.57, 0.49),
       4: (-0.95, 0.10), 5: (-0.58, -0.17), 6: (-0.08, 0.07),
       7: (0.10, -0.19), 8: (0.51, -0.25), 9: (0.97, -0.06),
       10: (0.74, 0.34), 11: (1.03, 0.47), 12: (1.02, 0.74)}

sizes = [250, 250, 310, 350, 330, 650,
         320, 350, 240, 260, 250, 460]

label_list = {1: 'Terra', 2: 'Ariano', 3: 'Soleios', 4: 'Rodeon', 5: 'Pyron',
              6: 'Ignasea', 7: 'Chelestra', 8: 'Josaia', 9: 'Mikheil',
              10: 'Abarrach', 11: 'Helraios', 12: 'Dycroft'}

colors = ['royalblue', 'indianred', 'forestgreen', 'gray', 'red', 'slateblue',
          'dodgerblue', 'sienna', 'firebrick', 'maroon', 'tomato', 'darkcyan']

edge_labels = {(u, v): G[u][v]["weight"] for (u, v) in G.edges()}
fig, ax = plt.subplots()
fig.set_facecolor('whitesmoke')
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=list(G.edges()), edge_color='gainsboro', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke',
                             bbox=dict(color='midnightblue'))
plt.title('Mapa de la Galaxia')
# Muestra el grafo al usuario
plt.show()

spaceships = {1: {'speed': 3, 'capacity': 1, 'weapons': 1, 'armor': 1},
              2: {'speed': 1, 'capacity': 3, 'weapons': 2, 'armor': 2},
              3: {'speed': 2, 'capacity': 2, 'weapons': 3, 'armor': 3}}

print('Seleccione una nave')
print('Crucero (Velocidad: Alta/Hipersalto, Carga: Ligera, Armamento: Ligero, Armadura: Ligera)')
print('Carguero (Velocidad: Baja, Carga: Pesada, Armamento: Intermedio, Armadura: Intermedia)')
print('Destructor (Velocidad: Intermedia, Carga: Intermedia, Armamento: Pesado, Armadura: Pesada)')
spaceship = int(input('Crucero(1)/Carguero(2)/Destructor(3): '))

chosen_ship = spaceships.get(spaceship)

print('Ingrese la cantidad de mercancía que desea llevar')
porcentaje = int(input('(Ingrese un valor entre 50 -carga mínima- y 100 -carga máxima-): '))

cargamento = calcular_carga(chosen_ship, porcentaje)

print()
random_event = random.randint(1, 7)
random_node = random.randint(1, 12)

if random_event == 1:
    print('Piratas espaciales patrullan ' + label_list[random_node] + '. (Las naves con armamento insuficiente para '
          'destruirlos deben reducir la velocidad ')
    print('para eludir sus radares y evitarlos)')
elif random_event == 2:
    print('Tormenta de asteroides en ' + label_list[random_node] + '. (Las naves con armadura insuficiente deben '
          'reducir la velocidad para esquivarlos)')
elif random_event == 3:
    print('Rebeldes tienen ' + label_list[random_node] + ' sitiado. (Las naves con armamento insuficiente para '
          'destruirlos deben reducir la velocidad para ')
    print('eludir sus radares y evitarlos)')
elif random_event == 4:
    print('Anomalía gravitacional alrededor de ' + label_list[random_node] + '. (La velocidad de la nave se reduce '
          'significativamente)')
elif random_event == 5:
    print('Un agujero negro entre la Puerta Intergaláctica Ignasea y el mundo de roca Abarrach permite '
          'realizar la ruta en 1 pársec.')
elif random_event == 6:
    print('Estalla una supernova cerca de ' + label_list[random_node] + '. (Las naves con armadura insuficiente '
          'deben reducir la velocidad para hacer reparaciones)')
elif random_event == 7:
    print('Anomalía gravitacional alrededor de ' + label_list[random_node] + ' (Impide usar hipersalto)')

speed_updates(G, chosen_ship, cargamento)
event_updates(G, chosen_ship, random_event, random_node)
hyper_jump(G, chosen_ship, cargamento, random_node)

edge_labels = {(u, v): G[u][v]["weight"] for (u, v) in G.edges()}
fig, ax = plt.subplots()
fig.set_facecolor('whitesmoke')
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=list(G.edges()), edge_color='gainsboro', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke',
                             bbox=dict(color='midnightblue'))
plt.title('Rutas actualizadas según nave/cargamento/imponderables')
# Muestra el grafo  actualizado segun la velocidad de la nave y el evento especial al usuario
plt.show()

print()
# Pide al usuario un planeta de origen y destino
print("Terra(1)/Ariano(2)/Soleios(3)/Rodeon(4)/Pyron(5)/Ignasea(6)/Chelestra(7)/"
      "Josaia(8)/Mikheil(9)/Abarrach(10)/Helraios(11)/Dycroft(12)")
origen = int(input("Ingrese el código del planeta de origen: "))
destino = int(input("Ingrese el código del planeta de destino: "))

# Usa la función dijkstra para crear una lista con los nodos que conforman la ruta mas corta
ruta_mas_corta = dijkstra(G, origen, destino)

# Con cada nodo en 'ruta más corta' y su siguiente (salvo el último) arma arcos y los guarda en una lista de tuplas
mapa_ruta_mas_corta = [(ruta_mas_corta[i], ruta_mas_corta[i+1]) for i in range(len(ruta_mas_corta) - 1)]

distancia_recorrida = peso_ruta(G, ruta_mas_corta)
peajes = (destino - origen) * 130
combustible = (destino - origen) * 240

print()
recompensa = int(math.pow((destino - origen), 2) * cargamento / distancia_recorrida) * 100
print('Mercancia transportada exitosamente')
print(f'Su recompensa es de {recompensa} créditos')
ganancia_neta = recompensa - peajes - combustible
print(f'Descontando peajes y combustible le quedan {ganancia_neta} créditos')

edge_labels = {(u, v): G[u][v]["weight"] for (u, v) in G.edges()}
fig, ax = plt.subplots()
fig.set_facecolor('whitesmoke')
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=list(G.edges()), edge_color='gainsboro', node_size=750)
# Resalta los arcos de la ruta mas corta
nx.draw_networkx_edges(G, pos, edgelist=list(mapa_ruta_mas_corta), edge_color='red', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke',
                             bbox=dict(color='midnightblue'))
plt.title('Ruta más rápida de ' + label_list[origen] + ' a ' + label_list[destino])
# Muestra el mapa de la galaxia con los arcos de la ruta mas corta resaltados
plt.show()
