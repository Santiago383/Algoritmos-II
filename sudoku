program sudoku2;

uses
    	sysutils;
    
type
	tArray = array [0..8,0..8] of integer;

const
	ruta1 = 'C:\Users\Usuario\Desktop\ucalp1\Algo2\tpSDK\sudoku1.txt';
    	ruta2 = 'C:\Users\Usuario\Desktop\ucalp1\Algo2\tpSDK\sudoku2.txt';

var
	sdk,sdk2:tArray;
	i,j:integer;


{este procedimiento requiere que el archivo tenga el siguiente formato: nueve filas de nueve numeros, las incognitas representadas por ceros y sin 
espacios entre los numeros}

procedure leerArchivo(ruta1:string;var tablero:tArray);

var	
	archtext:text;
	caracter:char;
    	iNum,code:integer;

begin
	assign(archtext,ruta1);
	reset(archtext);
	    while not eof(archtext) do
	    begin
	        for i:=0 to 8 do
	        begin
	            while not eoln(archtext) do
	            begin
	                for j:=0 to 8 do
	                begin
	                    read(archtext,caracter);
	                    val(caracter,iNum,code);
	                    tablero[i,j]:=iNum;
	                end;
	            end;
	            writeln;
	            readln(archtext);
	        end;
	    end;
	close(archtext);
end;


procedure guardarArchivo(ruta2:string;tablero:tArray);

var 
    archtext2:text;
    caracter2:string;

begin
    assign(archtext2,ruta2);
    rewrite(archtext2);
    for i:=0 to 8 do
    begin
        for j:=0 to 8 do
        begin
            caracter2:=intToStr(tablero[i,j]);
            write(archtext2,caracter2);
        end;
        writeln(archtext2,'');
    end;
    close(archtext2);
end;


procedure mostrarTablero(tablero:tArray);

begin
  for i:=0 to 8 do
    begin
	for j:=0 to 8 do
	begin
		write(tablero[i,j],' ');
	end;
	writeln;
    end;
    writeln;
end;


function repetido (num,x,y:integer):boolean;

var
	a,b:integer;

begin
	repetido:=false;
	for a:=0 to 8 do
	begin
		if sdk[x,a] = num then
		begin
			exit (true);
		end;
	end;
	
	for a:=0 to 8 do
	begin
		if sdk[a,y] = num then
		begin
			exit (true);
		end;
	end;	
	
	for a:=0 to 2 do
	begin
		for b:=0 to 2 do
		begin
			if sdk[((x div 3) * 3)+a,((y div 3) * 3)+b] = num then
			begin
				exit (true);
			end;
		end;
	end;
end;



{este procedimiento de abajo recorre la matriz, cuando encuentra un cero prueba numeros del 1 al 9, si cumple con la condición escribe ese número encima del 
cero y llama al procedimiento de nuevo. Cuando ninguno de los nueve números cumple con la condición sale de la llamada recursiva; ahora está de nuevo en la 
última celda donde había puesto un número que cumplía la condición pero conducía a una callejón sin salida, entonces escribe un cero encima de ese número 
y sigue el bucle con otro número distinto hasta que encuentre el que no lleva a un callejón sin salida. Cuando ningun número se puede poner 
en una celda hay un exit inmediatamente después para saltar hasta el final y poder seguir con la recursión sin pasar por los otros bucles. 
Sólo cuando no quedan ceros en la matriz termina la recorrida de la misma y el procedimiento guarda el resultado en una matriz auxiliar.}

procedure resolverTablero;
    
var
	z,x,y:integer;
	
begin
	for x:=0 to 8 do
	begin
		for y:=0 to 8 do
		begin
			if sdk[x,y] = 0 then
			begin
			    for z:=1 to 9 do
			    begin
    				if not repetido(z,x,y) then
    				begin
    					sdk[x,y]:=z;
    					resolverTablero;
    					sdk[x,y]:=0;
    				end;
    			    end;
    			exit;
			end;
		end;
	end;
	for x:=0 to 8 do
	begin
		for y:=0 to 8 do
		begin
			sdk2[x,y]:=sdk[x,y];
		end;
	end;
end;


procedure cargarCeros(var tableroResuelto:tArray);

var
	p:integer;

begin
	randomize;
	for i:=0 to 8 do
	begin
		for j:=0 to 8 do
		begin
			p:=random(3);
			if (p = 0) or (p = 1) then
			begin
				tableroResuelto[i,j]:=0;
			end;
		end;
	end;
end;



begin
	leerArchivo(ruta1,sdk);		{lee el archivo}
	mostrarTablero(sdk);		{lo muestra en pantalla}
	writeln;
	resolverTablero;		{resuelve}
	mostrarTablero(sdk2);		{muestra el resultado}
	cargarCeros(sdk2);		{pone ceros en el resuelto para crear otro}
	guardarArchivo(ruta2,sdk2);	{lo guarda}
	writeln;
	leerArchivo(ruta2,sdk);		{lee el nuevo}
	mostrarTablero(sdk);		{lo muestra}
	writeln;
	resolverTablero;		{lo resuelve}
	mostrarTablero(sdk2);		{lo muestra}		
end.
