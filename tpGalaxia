import networkx as nx
import matplotlib.pyplot as plt

def dijkstra(graph, ini, fin):
    distancias = {node: float('inf') for node in graph.nodes()}
    antecesores = {node: None for node in graph.nodes()}
    distancias[ini] = 0

    no_visitados = list(graph.nodes())

    while no_visitados:
        nodo_actual = min(no_visitados, key=lambda node: distancias[node])
        no_visitados.remove(nodo_actual)

        if nodo_actual == fin:
            break

        for neighbor in graph.neighbors(nodo_actual):
            peso_arista = graph[nodo_actual][neighbor]["weight"]
            distancia_actual = distancias[nodo_actual] + peso_arista

            if distancia_actual < distancias[neighbor]:
                distancias[neighbor] = distancia_actual
                antecesores[neighbor] = nodo_actual

    ruta_mas_corta = []
    while fin is not None:
        ruta_mas_corta.insert(0, fin)
        fin = antecesores[fin]

    return ruta_mas_corta


G = nx.DiGraph()

edges = [(1,2,5), (1,3,8), (1,4,15),
         (2, 3, 4), (2, 4, 9),
         (3, 4, 6), (3, 6, 25),
         (4, 5, 5), (4, 6, 12),
         (5, 6, 6), (5, 7, 13),
         (6, 7, 6), (6, 8, 13), (6, 10, 56),
         (7, 8, 8),
         (8, 9, 10), (8, 10, 19), (8, 11, 28),
         (9, 10, 10), (9, 11, 15),
         (10, 11, 6), (10, 12, 18),
         (11,12,9)]

G.add_weighted_edges_from(edges)

pos = {1: (-1.08,0.78), 2: (-0.78,0.78), 3: (-0.67,0.48),
        4: (-0.79,0.05), 5: (-0.58,-0.17), 6: (-0.08,0.07),
        7: (0.10,-0.19), 8: (0.51,-0.25), 9: (0.97,-0.06),
        10: (0.74,0.34), 11: (1.03,0.47), 12: (1.02,0.74)}

sizes = [250, 250, 310, 350, 650, 350,
        320, 350, 240, 260, 250, 460]

label_list = {1:'Terra', 2:'Ariano', 3:'Soleios', 4:'Rodeon', 5:'Pyron',
          6:'Ignasea', 7:'Chelestra', 8:'Josaia', 9:'Mikheil',
          10:'Abarrach', 11:'Helraios', 12:'Dycroft'}

colors = ['royalblue', 'indianred', 'sienna', 'gray', 'slateblue', 'red',
          'dodgerblue', 'forestgreen', 'maroon', 'firebrick', 'tomato', 'darkcyan']

edge_labels = {(u, v): G[u][v]["weight"] for (u, v) in G.edges()}

fig, ax = plt.subplots()
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=G.edges(), edge_color='gainsboro', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke', bbox=dict(color='midnightblue'))

plt.show()

origen = int(input("Ingrese el planeta de origen: "))
destino = int(input("Ingrese el planeta de destino: "))

ruta_mas_corta = dijkstra(G, origen, destino)

mapa_ruta_mas_corta = [(ruta_mas_corta[i], ruta_mas_corta[i+1]) for i in range(len(ruta_mas_corta) - 1)]

edge_colors = ['gainsboro' if edge not in mapa_ruta_mas_corta else 'red' for edge in G.edges()]

fig, ax = plt.subplots()
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=G.edges(), edge_color=edge_colors, node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke', bbox=dict(color='midnightblue'))

plt.show()
