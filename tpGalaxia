import networkx as nx
import matplotlib.pyplot as plt


def dijkstra(graph, ini, fin):
    # Diccionario para guardar la distancia acumulada de cada ruta tentativa en cada nodo
    distancias = {node: float('inf') for node in graph.nodes()}
    # Diccionario para guardar el antecesor tentativo de cada nodo
    antecesores = {node: None for node in graph.nodes()}
    # Lista de no visitados, inicialmente la carga con todos los nodos del grafo
    no_visitados = list(graph.nodes())
    # Da valor 0 al nodo origen en el diccionario distancias (inicialmente todos tienen valor infinito)
    distancias[ini] = 0

    # Mientras haya elementos en la lista de no visitados:
    while no_visitados:
        # Mira en la lista de no visitados, y selecciona el menor, en base a su valor en el diccionario 'distancias'
        nodo_actual = min(no_visitados, key=lambda node: distancias[node])
        # Saca al nodo actual de no visitados
        no_visitados.remove(nodo_actual)

        # Si el nodo actual es igual al nodo de destino que ingreso el usuario, se interrumpe el ciclo
        if nodo_actual == fin:
            break

        # Por cada uno de los vecinos del nodo actual (los nodos con los cuales el nodo actual esta conectado):
        for neighbor in graph.neighbors(nodo_actual):
            peso_arco = graph[nodo_actual][neighbor]["weight"]
            # En la var distancia actual guarda la distancia del nodo actual mas el peso del arco
            distancia_actual = distancias[nodo_actual] + peso_arco

            # Si distancia actual es menor que la distancia del vecino que estamos evaluando, actualiza la distancia
            # con distancia actual. Además guarda el nodo actual como antecesor del vecino.
            if distancia_actual < distancias[neighbor]:
                distancias[neighbor] = distancia_actual
                antecesores[neighbor] = nodo_actual

    # Crea una lista para guardar la ruta
    ruta_mas_rapida = []
    # Mientras 'fin' no sea nulo
    while fin is not None:
        # Agrega 'fin' al principio en la lista 'ruta mas rapida'
        ruta_mas_rapida.insert(0, fin)
        # Actualiza 'fin' con su antecesor. Cuando el antecesor sea el del nodo origen, el ciclo termina porque el
        # antecesor del nodo origen es nulo (la función nunca lo evaluó como vecino de nadie por eso nunca actualizó su
        # antecesor, que estaba inicializado como nulo)
        fin = antecesores[fin]

    # Devuelve la ruta, en el orden correcto
    return ruta_mas_rapida


# Crea un grafo con una lista de tuplas (nodo,nodo,peso) que indican los arcos y sus pesos
G = nx.DiGraph()

edges = [(1, 2, 5), (1, 3, 8), (1, 4, 15),
         (2, 3, 4), (2, 4, 9),
         (3, 4, 6), (3, 6, 25),
         (4, 5, 5), (4, 6, 12),
         (5, 6, 6), (5, 7, 13),
         (6, 7, 6), (6, 8, 13), (6, 10, 56),
         (7, 8, 8),
         (8, 9, 10), (8, 10, 19), (8, 11, 28),
         (9, 10, 10), (9, 11, 15),
         (10, 11, 6), (10, 12, 18),
         (11, 12, 9)]

G.add_weighted_edges_from(edges)

# Define varias características para que el grafo quede visualmente estético
pos = {1: (-1.08, 0.78), 2: (-0.69, 0.76), 3: (-0.57, 0.49),
       4: (-0.95, 0.10), 5: (-0.58, -0.17), 6: (-0.08, 0.07),
       7: (0.10, -0.19), 8: (0.51, -0.25), 9: (0.97, -0.06),
       10: (0.74, 0.34), 11: (1.03, 0.47), 12: (1.02, 0.74)}

sizes = [250, 250, 310, 350, 650, 350,
         320, 350, 240, 260, 250, 460]

label_list = {1: 'Terra', 2: 'Ariano', 3: 'Soleios', 4: 'Rodeon', 5: 'Pyron',
              6: 'Ignasea', 7: 'Chelestra', 8: 'Josaia', 9: 'Mikheil',
              10: 'Abarrach', 11: 'Helraios', 12: 'Dycroft'}

colors = ['royalblue', 'indianred', 'sienna', 'gray', 'slateblue', 'red',
          'dodgerblue', 'forestgreen', 'maroon', 'firebrick', 'tomato', 'darkcyan']

edge_labels = {(u, v): G[u][v]["weight"] for (u, v) in G.edges()}

fig, ax = plt.subplots()
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=list(G.edges()), edge_color='gainsboro', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke',
                             bbox=dict(color='midnightblue'))
plt.title('Mapa de la Galaxia')
# Muestra el grafo al usuario
plt.show()

# Pide al usuario un planeta de origen y destino
print("Terra(1)/Ariano(2)/Soleios(3)/Rodeon(4)/Pyron(5)/Ignasea(6)/Chelestra(7)/"
      "Josaia(8)/Mikheil(9)/Abarrach(10)/Helraios(11)/Dycroft(12)")
origen = int(input("Ingrese el código del planeta de origen: "))
destino = int(input("Ingrese el código del planeta de destino: "))

# Usa la función dijkstra para crear una lista con los nodos que conforman la ruta mas corta
ruta_mas_corta = dijkstra(G, origen, destino)

# Con cada nodo en 'ruta más corta' y su siguiente (salvo el último) arma arcos y los guarda en una lista de tuplas
mapa_ruta_mas_corta = [(ruta_mas_corta[i], ruta_mas_corta[i+1]) for i in range(len(ruta_mas_corta) - 1)]

fig, ax = plt.subplots()
ax.set_facecolor('midnightblue')
nx.draw_networkx_nodes(G, pos, node_size=sizes, node_color=colors)
nx.draw_networkx_edges(G, pos, edgelist=list(G.edges()), edge_color='gainsboro', node_size=750)
# Pinta de rojo solo los arcos de la ruta mas corta
nx.draw_networkx_edges(G, pos, edgelist=list(mapa_ruta_mas_corta), edge_color='red', node_size=750)
nx.draw_networkx_labels(G, pos, labels=label_list, verticalalignment='bottom', font_color='whitesmoke', font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8, font_color='whitesmoke',
                             bbox=dict(color='midnightblue'))
plt.title('Ruta más rápida de ' + label_list[origen] + ' a ' + label_list[destino])
# Muestra el mapa de la galaxia con los arcos de la ruta mas corta resaltados en rojo
plt.show()
