program parcialito;

uses
	sysutils,strutils;

type
	tArbol = ^tNodo;
	tNodo = record
		dato:string;
		izq,der:tArbol;
	end;
	
var

	raiz,rAux:tArbol;
	s:string;


{
Procedimiento para llenar un arbol, en este caso un arbol binario de busqueda. No advierte si hay valores repetidos asi que hay que evitarlos
manualmente. Usa la funcion str to int para poder compara los numeros asi que hay que cuidarse de escribir enteros correctamente.
}
procedure insertar(var r:tArbol;d:string);

begin

	if (r = nil) then
	begin
		new(r);
		r^.dato:=d;
		r^.izq:=nil;
		r^.der:=nil;
	end
	else if (strtoint(d) < strtoint(r^.dato)) then
		insertar(r^.izq,d)
	else if (strtoint(d) > strtoint(r^.dato)) then
		insertar(r^.der,d);	
		
end;


{
Calcula la altura del arbol. Devuelve -1 cuando encuentra un puntero nulo porque asi el primer nivel queda con valor 0. Compara dos
variables, altura izquierda y derecha, cuyos valores son obtenidos llamando recursivamente a las alturas del subarbol izquierdo y derecho.
Si son iguales, incrementa una de las dos en 1 (en este caso la derecha pero da igual) y esa es la altura del subarbol de la llamada recursiva anterior. 
Si una es mayor que la otra devuelve el valor de esa incrementado en 1. Asi hasta que vuelve a la primera comparación, la de los dos
subarboles principales; elige el más alto (o cualquiera si son iguales) y devuelve su altura incrementada en uno como altura del arbol total.
}
function altArbol(r:tArbol):integer;

var
	altDer,altIzq:integer;
	
begin
	
	if (r = nil) then
		exit (-1);	
		
	altIzq:=altArbol(r^.izq);	
	altDer:=altArbol(r^.der);
	
	if (altIzq > altDer) then
		exit (altIzq+1)
	else
		exit (altDer+1);
		
end;


{
Toma una copia del arbol y hasta su nivel maximo crea todos los nodos faltantes posibles, llenandolos simepre con un mismo valor basura (en este caso x)
que no se pueda confundir con los valores que aparecen en los nodos del arbol real.
}
procedure completar(var r:tArbol;n:integer);

begin

	if r = nil then
	begin
		new(r);
		r^.dato:='x';
		r^.izq:=nil;
		r^.der:=nil;
	end;
	
	if n = 0 then
		exit;
		
	if n > 0 then
	begin
		completar(r^.izq,n-1);
		completar(r^.der,n-1);
	end;	

end;


{
Toma una copia del arbol cargada con nodos que identifican a los nodos inexistentes en el arbol real, un entero (el nivel que queremos mapear) y un string
(por referencia). Si el nivel es mayor que 0 devuelve recursivamente la concatenacion de la estructura del nivel n-1 del subarbol izquierdo con la del 
derecho. Si el nivel es 0, si el dato es x (nodo inexistente en el arbol real) concatena 0, si no concatena 1, y asi de izquierda a derecha hasta que
termina y devuelve un string que identifica los nodos existentes con 1 y los faltantes con 0.
}
function estructuraNivel(r:tArbol;n:integer;var e:string):string;

begin
		
	if (n = 0) then
	begin
		if (r^.dato = 'x') then
			exit (e+'0')
		else
			exit (e+'1');
	end;
		
	if (n > 0) then
		exit (estructuraNivel(r^.izq,n-1,e)+estructuraNivel(r^.der,n-1,e));	

end;


{
Usa estructura del nivel n para asignar ese valor a un string, y lo recorre de principio a fin hasta que encuentra el primer 1, entonces borra todos
los caracteres anteriores del string e interrumpe el bucle. Despues invierte el string y repite el mismo procedimiento. Finalmente devuelve la longitud 
del string resultante, es decir que borro todos los ceros que habia a la izquierda y a la derecha del primer 1 que aparece de cada lado. Asi queda
un string del largo del ancho del nivel.
}
function anchoNivel(r:tArbol;n:integer):integer;

var
	j:integer;
	aux,est:string;

begin
	
	aux:=estructuraNivel(r,n,est);
	for j:=1 to length(aux) do
	begin
		if aux[j] = '1' then
		begin
			delete(aux,1,j-1);
			break;
		end;		
	end;
	
	aux:=reversestring(aux);		
	for j:=1 to length(aux) do
	begin
		if aux[j] = '1' then
		begin
			delete(aux,1,j-1);
			break;
		end;		
	end;
	
	anchoNivel:=length(aux);
		
end;


{
Funcion que calcula el ancho de todos los niveles del arbol, los compara y devuelve el mayor.
}
function anchoMax(r:tArbol):integer;

var
	i,ancho,alto,aMax:integer;

begin
	
	aMax:=0;
	alto:=altArbol(r);
	
	for i:=0 to alto do
	begin
		ancho:=anchoNivel(r,i);
		if (ancho > aMax) then
		begin
			aMax:=ancho;	
		end;	
	end;
	
	exit (aMax);
	
end;


BEGIN
	
	raiz:=nil;
	rAux:=nil;
	readln(s);
	while s <> 'fin' do
	begin
		insertar(raiz,s);
		insertar(rAux,s);
		readln(s);
	end;
	
	completar(rAux,altArbol(raiz));
	writeln;
	writeln(altArbol(raiz));
	writeln(anchoMax(rAux));
	
END.
