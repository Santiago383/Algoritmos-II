program grafo;


type
	tAristas = array [1..12,1..12] of integer;
	tVertices = array[1..12] of integer;
	tGrafo = record
		vertices:tVertices;
		aristas:tAristas;
	end;
	tRuta = record
		ori,des,peso:integer;
	end;	
	tRutas = array [1..12,1..12] of tRuta;
		
	
var
	galaxia:tGrafo;
	origen,destino:integer;
	i,j,aux,min:integer;
	rutaMasCorta:tRutas;
	


procedure galaxiaVacia(var g:tGrafo);

begin

	for i:=1 to 12 do
	begin
		for j:=1 to 12 do
			g.aristas[i,j]:=0;
	end;

end;		



function distancia(g:tGrafo;o,d:integer;var rutaMin:tRutas):integer;

var
	distanciaMin,distanciaActual,k:integer;

begin
	
	if o = d then
		exit (0);	
	
	distanciaMin:=maxint;
	for k:=1 to d do
	begin
		if g.aristas[o,k] <> 0 then
		begin
			distanciaActual:=g.aristas[o,k]+distancia(g,k,d,rutaMin);
			rutaMin[k,o].ori:=o;
			rutaMin[k,o].des:=k;
			rutaMin[k,o].peso:=distanciaActual;
			if (distanciaActual < distanciaMin) then
				distanciaMin:=distanciaActual;
		end;		
	end;
	
	exit (distanciaMin);
		
end;
	
	
	
begin
	
	galaxiaVacia(galaxia);
	galaxia.aristas[1,2]:=5;galaxia.aristas[1,3]:=7;galaxia.aristas[1,4]:=12;
	galaxia.aristas[2,3]:=4;galaxia.aristas[2,4]:=8;
	galaxia.aristas[3,4]:=7;galaxia.aristas[3,5]:=11;galaxia.aristas[3,6]:=18;
	galaxia.aristas[4,5]:=4;galaxia.aristas[4,6]:=10;galaxia.aristas[4,7]:=19;
	galaxia.aristas[5,6]:=7;galaxia.aristas[5,8]:=24;
	galaxia.aristas[6,7]:=8;galaxia.aristas[6,8]:=16;galaxia.aristas[6,9]:=24;
	galaxia.aristas[7,8]:=11;galaxia.aristas[7,9]:=17;galaxia.aristas[7,10]:=28;galaxia.aristas[7,12]:=42;
	galaxia.aristas[8,9]:=8;galaxia.aristas[8,10]:=13;
	galaxia.aristas[9,10]:=9;
	galaxia.aristas[10,11]:=10;galaxia.aristas[10,12]:=18;
	galaxia.aristas[11,12]:=7;
	
	writeln;
	write('Ingrese el planeta de origen: ');
	readln(origen);
	write('Ingrese el planeta de destino: ');
	readln(destino);
	distancia(galaxia,origen,destino,rutaMasCorta);
	writeln;
	writeln('La ruta mas corta es la suiguiente:');
	writeln;
	
	{for i:=origen to destino do
	begin
		for j:=origen to destino do
		begin
			if rutaMasCorta[i,j].peso <> 0 then
			begin
				writeln(rutaMasCorta[i,j].ori,' ',
				rutaMasCorta[i,j].des,' ',
				rutaMasCorta[i,j].peso);
			end;
		end;
	end;}
	
	writeln(origen);
	aux:=0;
	while origen <> destino do
	begin
		min:=maxint;
		for i:=1 to 12 do
		begin
			if (rutaMasCorta[i,origen].peso <> 0) and (rutaMasCorta[i,origen].peso < min) then
			begin
				min:=rutaMasCorta[i,origen].peso;
				aux:=rutaMasCorta[i,origen].des;
			end;
		end;
		writeln(aux);
		origen:=aux;
	end;
		
end.	
