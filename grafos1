program grafo;


const
	N = 12;


type
	tAristas = array [1..N,1..N] of integer;
	tVertices = array[1..N] of integer;
	tGrafo = record
		vertices:tVertices;
		aristas:tAristas;
	end;
		
	
var
	galaxia:tGrafo;
	origen,destino:integer;
	i,j:integer;
	rutas:tAristas;
	


procedure galaxiaVacia(var g:tGrafo);//llena de ceros el grafo

begin

	for i:=1 to N do
	begin
		for j:=1 to N do
			g.aristas[i,j]:=0;
	end;

end;		


{Esta funcion calcula el peso total de la ruta mas corta desde un origen 'o' hasta un destino 'd'.
* Para un valor de 'o' dado, itera todas las posibles aristas que salen de el y busca la que 
* conduce por la ruta mas corta sumando su peso al peso total del subgrafo al que apunta,
* el cual lo calcula llamando recursivamente a 'distancia' con origen igual al vertice al
* que apunta la arista en cuestion. El caso base es cuando 'o' es igual a destino.
* Cada vez que sale de la recursion guarda el peso total de la ruta a
* la que apunta en la matriz 'ruta' (como 'ruta' es de tipo tArista, la coordenada filas indica el
* vertice de origen de la arista, y la coordenada columnas induca su vertice de destino).
* Despues se puede procesar la matriz resultante para obtener la ruta mas corta.}

function distancia(g:tGrafo;o,d:integer;var rutaMin:tAristas):integer;

var
	distanciaMin,distanciaActual,k:integer;

begin
	
	if o = d then
		exit (0);//caso base, si estamos en el destino no hay mas distancia que recorrer	
	
	distanciaMin:=maxint;
	for k:=1 to d do
	begin
		if g.aristas[o,k] <> 0 then
		begin
			distanciaActual:=g.aristas[o,k]+distancia(g,k,d,rutaMin);
			rutaMin[o,k]:=distanciaActual;
			if (distanciaActual < distanciaMin) then
				distanciaMin:=distanciaActual;
		end;		
	end;
	
	exit (distanciaMin);
		
end;


{Este procedimiento funciona parecido a la funcion 'distancia', se fija cual de
* las aristas que salen del origen es el camino mas corto, imprime el
* vertice y usa ese valor como nuevo origen, asi hasta que llega al
* destino, ahi corta}

procedure mostrarRuta(o,d:integer;ruta:tAristas);

var
	min,aux,k:integer;

begin

	writeln(o);
	aux:=0;
	while o <> d do
	begin
		min:=maxint;
		for k:=1 to N do
		begin
			if (ruta[o,k] <> 0) and (ruta[o,k] < min) then
			begin
				min:=ruta[o,k];
				aux:=k;
			end;
		end;
		writeln(aux);
		o:=aux;
	end;

end;
	
	
	
BEGIN
	
	galaxiaVacia(galaxia);
	galaxia.aristas[1,2]:=5;galaxia.aristas[1,3]:=7;galaxia.aristas[1,4]:=12;
	galaxia.aristas[2,3]:=4;galaxia.aristas[2,4]:=8;
	galaxia.aristas[3,4]:=7;galaxia.aristas[3,5]:=11;galaxia.aristas[3,6]:=18;
	galaxia.aristas[4,5]:=4;galaxia.aristas[4,6]:=10;galaxia.aristas[4,7]:=19;
	galaxia.aristas[5,6]:=7;galaxia.aristas[5,8]:=24;
	galaxia.aristas[6,7]:=8;galaxia.aristas[6,8]:=16;galaxia.aristas[6,9]:=24;
	galaxia.aristas[7,8]:=11;galaxia.aristas[7,9]:=17;galaxia.aristas[7,10]:=28;galaxia.aristas[7,12]:=42;
	galaxia.aristas[8,9]:=8;galaxia.aristas[8,10]:=13;
	galaxia.aristas[9,10]:=9;galaxia.aristas[9,11]:=10;
	galaxia.aristas[10,11]:=10;galaxia.aristas[10,12]:=18;
	galaxia.aristas[11,12]:=7;//grafo inventado para probar el algoritmo
	
	writeln;
	write('Ingrese el planeta de origen: ');
	readln(origen);//usuario elige un punto de origen
	write('Ingrese el planeta de destino: ');
	readln(destino);//usuario elige un punto de destino
	distancia(galaxia,origen,destino,rutas);//llamado a la funcion que calcula la ruta mas corta
	writeln;
	writeln('La ruta mas corta es la siguiente:');
	writeln;
	
	{Este loop es para verificar que la funcion 'distancia' haya guardado
	* todas las posibles aristas con el peso total desde esa arista hasta
	* el destino}

	{for i:=origen to destino do
	begin
		for j:=origen to destino do
		begin
			if rutas[i,j] <> 0 then
			begin
				writeln(i,' ',j,' ',rutas[i,j]);
			end;
		end;
	end;}
	
	mostrarRuta(origen,destino,rutas);//muestra la ruta mas corta
		
END.	
